name: Deploy FastAPI Application
on:
  push:
    branches: [main]
    paths:
      - app/**
      - .github/workflows/ai-deployment.yml
      - requirements.txt  # Added since it's needed for the build
      - Dockerfile       # Added to trigger on Dockerfile changes

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Build docker image
        # Remove working-directory since Dockerfile is in root
        run: docker build -t mayowaadebanjo/fastapi-app .

      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_AI_PASSWORD }} | docker login -u ${{ secrets.DOCKER_AI_USERNAME }} --password-stdin

      - name: Publish image to Docker Hub
        run: docker push mayowaadebanjo/fastapi-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker system prune -af
            docker volume prune -f
            
            if ! docker network inspect app-network >/dev/null 2>&1; then
              docker network create app-network
            fi
            
            echo ${{ secrets.DOCKER_AI_PASSWORD }} | docker login -u ${{ secrets.DOCKER_AI_USERNAME }} --password-stdin
            docker pull mayowaadebanjo/fastapi-app:latest
            docker rm -f fastapi-app-container || true
            
            docker run -d -p 8000:8000 \
              -e RETELL_API_KEY=${{ secrets.RETELL_API_KEY }} \
              -e RETELL_AGENT_ID=${{ secrets.RETELL_AGENT_ID }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e RAPID_API_KEY=${{ secrets.RAPID_API_KEY }} \
              --network app-network \
              --name fastapi-app-container \
              mayowaadebanjo/fastapi-app:latest
            
            # Wait for container to start and verify it's running
            echo "Waiting for container to start..."
            sleep 10
            
            if ! docker ps | grep -q fastapi-app-container; then
              echo "Container failed to start"
              docker logs fastapi-app-container
              exit 1
            fi
            
            # More comprehensive health check
            for i in {1..12}; do
              echo "Health check attempt $i..."
              if curl -f http://localhost:8000/health; then
                echo "Service is healthy!"
                exit 0
              fi
              sleep 5
            done
            
            echo "Service failed health check. Container logs:"
            docker logs fastapi-app-container
            exit 1